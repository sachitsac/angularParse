'use strict';
module.exports = function(grunt) {
    var target = grunt.option('target') || 'dev';
    var config = require('./package.json').config;
    // load all grunt tasks
    require('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);
    // init
    grunt.initConfig({
        clean: {
            dist: [config.path.dist, '.tmp/'],
        },
        jshint: {
            options: {
                jshintrc: config.path.app + 'data/config/jshintrc'
            },
            src: [config.path.app + 'scripts/**/*.js', '!' + config.path.app + 'scripts/templates.js', '!' + config.path.app + 'scripts/lib/**']
        },
        watch: {
            dev: {
                files: [config.path.app + 'views/**/*.html'],
                tasks: ['ngtemplates'],
                options: {
                    reload: true,
                }
            }
        },
        copy: {
            main: {
                expand: true,
                cwd: config.path.app,
                src: ['**', '!views/**', '!data/config/jshintrc', '!styles/*.less', '!scripts/**', '!scripts/lib/**', '!**/*.css', 'scripts/lib/requirejs/require.js', 'scripts/lib/font-awesome/fonts/**/*.*'],
                dest: config.path.dist
            }
        },
        requirejs: {
            compile: {
                options: {
                    baseUrl: config.path.app + 'scripts/',
                    name: 'init',
                    mainConfigFile: config.path.app + 'scripts/init.js',
                    out: config.path.dist + 'scripts/main.js',
                    optimize: 'uglify2',
                    uglify2: {
                        mangle: false
                    }
                }
            }
        },
        replace: {
            requirejs: {
                options: {
                    patterns: [{
                        match: /<script src\=\"scripts\/lib\/requirejs\/require.js\" data-main\=\"scripts\/init\"><\/script>/gi,
                        replacement: '<script src="scripts/lib/requirejs/require.js" type="text/javascript"></script> \
                        <script src="scripts/main.js" type="text/javascript"></script>'
                    }]
                },
                files: [{
                    expand: true,
                    flatten: true,
                    src: [config.path.app + 'index.html'],
                    dest: config.path.dist
                }]
            },
            fontAwesome: {
                options: {
                    patterns: [{
                        match: /@fa-font-path:\s*\"(?:[^\"\']+)\"/gi,
                        replacement: '@fa-font-path: "../scripts/lib/font-awesome/fonts"'
                    }]
                },
                files: [{
                    expand: true,
                    flatten: true,
                    src: [config.path.app + 'scripts/lib/font-awesome/less/variables.less'],
                    dest: config.path.app + 'scripts/lib/font-awesome/less/'
                }]
            },
            less: {
                options: {
                    patterns: [{
                        match: /<link rel=\"stylesheet\/less\" type=\"text\/css\" href=\"styles\/main.less\"\s*\/>/gi,
                        replacement: '<link rel="stylesheet" href="styles/main.css" media="all">'
                    }]
                },
                files: [{
                    expand: true,
                    flatten: true,
                    src: [config.path.dist + 'index.html'],
                    dest: config.path.dist
                }]
            }
        },
        less: {
            css: {
                files: {
                    'dist/styles/main.css': [config.path.app + 'styles/main.less']
                }
            }
        },
        useminPrepare: {
            html: config.path.app + 'index.html'
        },
        usemin: {
            html: [config.path.dist + 'views/*.html', config.path.dist + 'index.html']
        },
        // must be run right before else; we use it during development
        ngtemplates: {
            app: {
                cwd: config.path.app,
                src: ['views/**/*.html'],
                dest: config.path.app + 'scripts/templates.js',
                options: {
                    module: 'angularParse',
                    bootstrap: function(module, script) {
                        return [
                            // define requirejs module
                            '\ndefine([\'angularParse\'], function(angularParse) {',
                            // initialize angular module
                            'angularParse.run([\'$templateCache\', function($templateCache){\n',
                            // generated by ngtemplates
                            script,
                            // close everything
                            '\n}]);\n', '\n});'].join('');
                    }
                }
            }
        },
        htmlmin: {
            dist: {
                options: {
                    collapseWhitespace: true,
                    removeComments: true,
                    collapseBooleanAttributes: false,
                    removeRedundantAttributes: false,
                    useShortDoctype: true
                },
                files: [{
                    expand: true,
                    cwd: config.path.dist,
                    src: ['index.html'],
                    dest: config.path.dist
                }]
            }
        },
        cssmin: {
            main: {
                expand: true,
                cwd: config.path.dist,
                src: ['styles/main.css'],
                dest: config.path.dist
            }
        },
        karma: {
            unit: {
                configFile: 'karma.conf.js'                
            }
        }
    });
    grunt.registerTask('dev', ['watch']);
    // !IMPORTANT - order is important
    grunt.registerTask('build', ['clean', 'ngtemplates', 'jshint', 'copy', 'requirejs', 'replace:fontAwesome', 'less', 'replace:requirejs', 'useminPrepare', 'concat', 'cssmin', 'usemin', 'replace:less', 'htmlmin']);
    grunt.registerTask('test', ['karma']);
};